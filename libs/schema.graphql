schema {
	query: query_root
	subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
	"""
	measured in seconds
	"""
	ttl: Int! = 60

	"""
	refresh the cache entry
	"""
	refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
	_eq: String
	_gt: String
	_gte: String

	"""
	does the column match the given case-insensitive pattern
	"""
	_ilike: String
	_in: [String!]

	"""
	does the column match the given POSIX regular expression, case insensitive
	"""
	_iregex: String
	_is_null: Boolean

	"""
	does the column match the given pattern
	"""
	_like: String
	_lt: String
	_lte: String
	_neq: String

	"""
	does the column NOT match the given case-insensitive pattern
	"""
	_nilike: String
	_nin: [String!]

	"""
	does the column NOT match the given POSIX regular expression, case insensitive
	"""
	_niregex: String

	"""
	does the column NOT match the given pattern
	"""
	_nlike: String

	"""
	does the column NOT match the given POSIX regular expression, case sensitive
	"""
	_nregex: String

	"""
	does the column NOT match the given SQL regular expression
	"""
	_nsimilar: String

	"""
	does the column match the given POSIX regular expression, case sensitive
	"""
	_regex: String

	"""
	does the column match the given SQL regular expression
	"""
	_similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
	_eq: _text
	_gt: _text
	_gte: _text
	_in: [_text!]
	_is_null: Boolean
	_lt: _text
	_lte: _text
	_neq: _text
	_nin: [_text!]
}

type archive_archive_query {
	"""
	fetch data from the table: "block"
	"""
	block(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_block_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_block_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_block_bool_exp
	): [archive_block!]!

	"""
	fetch aggregated fields from the table: "block"
	"""
	block_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_block_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_block_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_block_bool_exp
	): archive_block_aggregate!

	"""
	fetch data from the table: "block" using primary key columns
	"""
	block_by_pk(id: bpchar!): archive_block

	"""
	fetch data from the table: "call"
	"""
	call(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	fetch aggregated fields from the table: "call"
	"""
	call_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): archive_call_aggregate!

	"""
	fetch data from the table: "call" using primary key columns
	"""
	call_by_pk(id: String!): archive_call

	"""
	fetch data from the table: "contracts_contract_emitted"
	"""
	contracts_contract_emitted(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): [archive_contracts_contract_emitted!]!

	"""
	fetch aggregated fields from the table: "contracts_contract_emitted"
	"""
	contracts_contract_emitted_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): archive_contracts_contract_emitted_aggregate!

	"""
	fetch data from the table: "contracts_contract_emitted" using primary key columns
	"""
	contracts_contract_emitted_by_pk(
		event_id: bpchar!
	): archive_contracts_contract_emitted

	"""
	fetch data from the table: "event"
	"""
	event(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	fetch aggregated fields from the table: "event"
	"""
	event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): archive_event_aggregate!

	"""
	fetch data from the table: "event" using primary key columns
	"""
	event_by_pk(id: bpchar!): archive_event

	"""
	fetch data from the table: "extrinsic"
	"""
	extrinsic(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): [archive_extrinsic!]!

	"""
	fetch aggregated fields from the table: "extrinsic"
	"""
	extrinsic_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): archive_extrinsic_aggregate!

	"""
	fetch data from the table: "extrinsic" using primary key columns
	"""
	extrinsic_by_pk(id: bpchar!): archive_extrinsic

	"""
	fetch data from the table: "frontier_ethereum_transaction"
	"""
	frontier_ethereum_transaction(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): [archive_frontier_ethereum_transaction!]!

	"""
	fetch aggregated fields from the table: "frontier_ethereum_transaction"
	"""
	frontier_ethereum_transaction_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): archive_frontier_ethereum_transaction_aggregate!

	"""
	fetch data from the table: "frontier_ethereum_transaction" using primary key columns
	"""
	frontier_ethereum_transaction_by_pk(
		call_id: String!
	): archive_frontier_ethereum_transaction

	"""
	fetch data from the table: "frontier_evm_log"
	"""
	frontier_evm_log(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): [archive_frontier_evm_log!]!

	"""
	fetch aggregated fields from the table: "frontier_evm_log"
	"""
	frontier_evm_log_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): archive_frontier_evm_log_aggregate!

	"""
	fetch data from the table: "frontier_evm_log" using primary key columns
	"""
	frontier_evm_log_by_pk(event_id: bpchar!): archive_frontier_evm_log

	"""
	fetch data from the table: "metadata"
	"""
	metadata(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_metadata_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_metadata_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_metadata_bool_exp
	): [archive_metadata!]!

	"""
	fetch aggregated fields from the table: "metadata"
	"""
	metadata_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_metadata_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_metadata_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_metadata_bool_exp
	): archive_metadata_aggregate!

	"""
	fetch data from the table: "metadata" using primary key columns
	"""
	metadata_by_pk(id: String!): archive_metadata
}

type archive_archive_subscription {
	"""
	fetch data from the table: "block"
	"""
	block(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_block_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_block_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_block_bool_exp
	): [archive_block!]!

	"""
	fetch aggregated fields from the table: "block"
	"""
	block_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_block_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_block_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_block_bool_exp
	): archive_block_aggregate!

	"""
	fetch data from the table: "block" using primary key columns
	"""
	block_by_pk(id: bpchar!): archive_block

	"""
	fetch data from the table in a streaming manner : "block"
	"""
	block_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_block_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_block_bool_exp
	): [archive_block!]!

	"""
	fetch data from the table: "call"
	"""
	call(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	fetch aggregated fields from the table: "call"
	"""
	call_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): archive_call_aggregate!

	"""
	fetch data from the table: "call" using primary key columns
	"""
	call_by_pk(id: String!): archive_call

	"""
	fetch data from the table in a streaming manner : "call"
	"""
	call_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_call_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	fetch data from the table: "contracts_contract_emitted"
	"""
	contracts_contract_emitted(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): [archive_contracts_contract_emitted!]!

	"""
	fetch aggregated fields from the table: "contracts_contract_emitted"
	"""
	contracts_contract_emitted_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): archive_contracts_contract_emitted_aggregate!

	"""
	fetch data from the table: "contracts_contract_emitted" using primary key columns
	"""
	contracts_contract_emitted_by_pk(
		event_id: bpchar!
	): archive_contracts_contract_emitted

	"""
	fetch data from the table in a streaming manner : "contracts_contract_emitted"
	"""
	contracts_contract_emitted_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_contracts_contract_emitted_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): [archive_contracts_contract_emitted!]!

	"""
	fetch data from the table: "event"
	"""
	event(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	fetch aggregated fields from the table: "event"
	"""
	event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): archive_event_aggregate!

	"""
	fetch data from the table: "event" using primary key columns
	"""
	event_by_pk(id: bpchar!): archive_event

	"""
	fetch data from the table in a streaming manner : "event"
	"""
	event_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_event_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	fetch data from the table: "extrinsic"
	"""
	extrinsic(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): [archive_extrinsic!]!

	"""
	fetch aggregated fields from the table: "extrinsic"
	"""
	extrinsic_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): archive_extrinsic_aggregate!

	"""
	fetch data from the table: "extrinsic" using primary key columns
	"""
	extrinsic_by_pk(id: bpchar!): archive_extrinsic

	"""
	fetch data from the table in a streaming manner : "extrinsic"
	"""
	extrinsic_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_extrinsic_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): [archive_extrinsic!]!

	"""
	fetch data from the table: "frontier_ethereum_transaction"
	"""
	frontier_ethereum_transaction(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): [archive_frontier_ethereum_transaction!]!

	"""
	fetch aggregated fields from the table: "frontier_ethereum_transaction"
	"""
	frontier_ethereum_transaction_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): archive_frontier_ethereum_transaction_aggregate!

	"""
	fetch data from the table: "frontier_ethereum_transaction" using primary key columns
	"""
	frontier_ethereum_transaction_by_pk(
		call_id: String!
	): archive_frontier_ethereum_transaction

	"""
	fetch data from the table in a streaming manner : "frontier_ethereum_transaction"
	"""
	frontier_ethereum_transaction_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_frontier_ethereum_transaction_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): [archive_frontier_ethereum_transaction!]!

	"""
	fetch data from the table: "frontier_evm_log"
	"""
	frontier_evm_log(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): [archive_frontier_evm_log!]!

	"""
	fetch aggregated fields from the table: "frontier_evm_log"
	"""
	frontier_evm_log_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): archive_frontier_evm_log_aggregate!

	"""
	fetch data from the table: "frontier_evm_log" using primary key columns
	"""
	frontier_evm_log_by_pk(event_id: bpchar!): archive_frontier_evm_log

	"""
	fetch data from the table in a streaming manner : "frontier_evm_log"
	"""
	frontier_evm_log_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_frontier_evm_log_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): [archive_frontier_evm_log!]!

	"""
	fetch data from the table: "metadata"
	"""
	metadata(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_metadata_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_metadata_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_metadata_bool_exp
	): [archive_metadata!]!

	"""
	fetch aggregated fields from the table: "metadata"
	"""
	metadata_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_metadata_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_metadata_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_metadata_bool_exp
	): archive_metadata_aggregate!

	"""
	fetch data from the table: "metadata" using primary key columns
	"""
	metadata_by_pk(id: String!): archive_metadata

	"""
	fetch data from the table in a streaming manner : "metadata"
	"""
	metadata_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [archive_metadata_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: archive_metadata_bool_exp
	): [archive_metadata!]!
}

"""
columns and relationships of "block"
"""
type archive_block {
	"""
	An array relationship
	"""
	calls(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	An aggregate relationship
	"""
	calls_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): archive_call_aggregate!

	"""
	An array relationship
	"""
	events(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	An aggregate relationship
	"""
	events_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): archive_event_aggregate!

	"""
	An array relationship
	"""
	extrinsics(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): [archive_extrinsic!]!

	"""
	An aggregate relationship
	"""
	extrinsics_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_extrinsic_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_extrinsic_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_extrinsic_bool_exp
	): archive_extrinsic_aggregate!
	extrinsics_root: bpchar!
	hash: bpchar!
	height: Int!
	id: bpchar!
	parent_hash: bpchar!
	spec_id: String!
	state_root: bpchar!
	timestamp: timestamptz!
	validator: String
}

"""
aggregated selection of "block"
"""
type archive_block_aggregate {
	aggregate: archive_block_aggregate_fields
	nodes: [archive_block!]!
}

"""
aggregate fields of "block"
"""
type archive_block_aggregate_fields {
	avg: archive_block_avg_fields
	count(columns: [archive_block_select_column!], distinct: Boolean): Int!
	max: archive_block_max_fields
	min: archive_block_min_fields
	stddev: archive_block_stddev_fields
	stddev_pop: archive_block_stddev_pop_fields
	stddev_samp: archive_block_stddev_samp_fields
	sum: archive_block_sum_fields
	var_pop: archive_block_var_pop_fields
	var_samp: archive_block_var_samp_fields
	variance: archive_block_variance_fields
}

"""
aggregate avg on columns
"""
type archive_block_avg_fields {
	height: Float
}

"""
Boolean expression to filter rows from the table "block". All fields are combined with a logical 'AND'.
"""
input archive_block_bool_exp {
	_and: [archive_block_bool_exp!]
	_not: archive_block_bool_exp
	_or: [archive_block_bool_exp!]
	calls: archive_call_bool_exp
	events: archive_event_bool_exp
	extrinsics: archive_extrinsic_bool_exp
	extrinsics_root: bpchar_comparison_exp
	hash: bpchar_comparison_exp
	height: Int_comparison_exp
	id: bpchar_comparison_exp
	parent_hash: bpchar_comparison_exp
	spec_id: String_comparison_exp
	state_root: bpchar_comparison_exp
	timestamp: timestamptz_comparison_exp
	validator: String_comparison_exp
}

"""
aggregate max on columns
"""
type archive_block_max_fields {
	extrinsics_root: bpchar
	hash: bpchar
	height: Int
	id: bpchar
	parent_hash: bpchar
	spec_id: String
	state_root: bpchar
	timestamp: timestamptz
	validator: String
}

"""
aggregate min on columns
"""
type archive_block_min_fields {
	extrinsics_root: bpchar
	hash: bpchar
	height: Int
	id: bpchar
	parent_hash: bpchar
	spec_id: String
	state_root: bpchar
	timestamp: timestamptz
	validator: String
}

"""
Ordering options when selecting data from "block".
"""
input archive_block_order_by {
	calls_aggregate: archive_call_aggregate_order_by
	events_aggregate: archive_event_aggregate_order_by
	extrinsics_aggregate: archive_extrinsic_aggregate_order_by
	extrinsics_root: order_by
	hash: order_by
	height: order_by
	id: order_by
	parent_hash: order_by
	spec_id: order_by
	state_root: order_by
	timestamp: order_by
	validator: order_by
}

"""
select columns of table "block"
"""
enum archive_block_select_column {
	"""
	column name
	"""
	extrinsics_root

	"""
	column name
	"""
	hash

	"""
	column name
	"""
	height

	"""
	column name
	"""
	id

	"""
	column name
	"""
	parent_hash

	"""
	column name
	"""
	spec_id

	"""
	column name
	"""
	state_root

	"""
	column name
	"""
	timestamp

	"""
	column name
	"""
	validator
}

"""
aggregate stddev on columns
"""
type archive_block_stddev_fields {
	height: Float
}

"""
aggregate stddev_pop on columns
"""
type archive_block_stddev_pop_fields {
	height: Float
}

"""
aggregate stddev_samp on columns
"""
type archive_block_stddev_samp_fields {
	height: Float
}

"""
Streaming cursor of the table "block"
"""
input archive_block_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_block_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_block_stream_cursor_value_input {
	extrinsics_root: bpchar
	hash: bpchar
	height: Int
	id: bpchar
	parent_hash: bpchar
	spec_id: String
	state_root: bpchar
	timestamp: timestamptz
	validator: String
}

"""
aggregate sum on columns
"""
type archive_block_sum_fields {
	height: Int
}

"""
aggregate var_pop on columns
"""
type archive_block_var_pop_fields {
	height: Float
}

"""
aggregate var_samp on columns
"""
type archive_block_var_samp_fields {
	height: Float
}

"""
aggregate variance on columns
"""
type archive_block_variance_fields {
	height: Float
}

"""
columns and relationships of "call"
"""
type archive_call {
	args(
		"""
		JSON select path
		"""
		path: String
	): jsonb

	"""
	An object relationship
	"""
	block: archive_block!
	block_id: bpchar!

	"""
	An object relationship
	"""
	call: archive_call

	"""
	An array relationship
	"""
	calls(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	An aggregate relationship
	"""
	calls_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): archive_call_aggregate!
	error(
		"""
		JSON select path
		"""
		path: String
	): jsonb

	"""
	An array relationship
	"""
	events(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	An aggregate relationship
	"""
	events_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): archive_event_aggregate!

	"""
	An object relationship
	"""
	extrinsic: archive_extrinsic!
	extrinsic_id: bpchar!

	"""
	An array relationship
	"""
	frontier_ethereum_transactions(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): [archive_frontier_ethereum_transaction!]!

	"""
	An aggregate relationship
	"""
	frontier_ethereum_transactions_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_ethereum_transaction_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_ethereum_transaction_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_ethereum_transaction_bool_exp
	): archive_frontier_ethereum_transaction_aggregate!
	id: String!
	name: String!
	origin(
		"""
		JSON select path
		"""
		path: String
	): jsonb
	parent_id: String
	pos: Int!
	success: Boolean!
}

"""
aggregated selection of "call"
"""
type archive_call_aggregate {
	aggregate: archive_call_aggregate_fields
	nodes: [archive_call!]!
}

"""
aggregate fields of "call"
"""
type archive_call_aggregate_fields {
	avg: archive_call_avg_fields
	count(columns: [archive_call_select_column!], distinct: Boolean): Int!
	max: archive_call_max_fields
	min: archive_call_min_fields
	stddev: archive_call_stddev_fields
	stddev_pop: archive_call_stddev_pop_fields
	stddev_samp: archive_call_stddev_samp_fields
	sum: archive_call_sum_fields
	var_pop: archive_call_var_pop_fields
	var_samp: archive_call_var_samp_fields
	variance: archive_call_variance_fields
}

"""
order by aggregate values of table "call"
"""
input archive_call_aggregate_order_by {
	avg: archive_call_avg_order_by
	count: order_by
	max: archive_call_max_order_by
	min: archive_call_min_order_by
	stddev: archive_call_stddev_order_by
	stddev_pop: archive_call_stddev_pop_order_by
	stddev_samp: archive_call_stddev_samp_order_by
	sum: archive_call_sum_order_by
	var_pop: archive_call_var_pop_order_by
	var_samp: archive_call_var_samp_order_by
	variance: archive_call_variance_order_by
}

"""
aggregate avg on columns
"""
type archive_call_avg_fields {
	pos: Float
}

"""
order by avg() on columns of table "call"
"""
input archive_call_avg_order_by {
	pos: order_by
}

"""
Boolean expression to filter rows from the table "call". All fields are combined with a logical 'AND'.
"""
input archive_call_bool_exp {
	_and: [archive_call_bool_exp!]
	_not: archive_call_bool_exp
	_or: [archive_call_bool_exp!]
	args: jsonb_comparison_exp
	block: archive_block_bool_exp
	block_id: bpchar_comparison_exp
	call: archive_call_bool_exp
	calls: archive_call_bool_exp
	error: jsonb_comparison_exp
	events: archive_event_bool_exp
	extrinsic: archive_extrinsic_bool_exp
	extrinsic_id: bpchar_comparison_exp
	frontier_ethereum_transactions: archive_frontier_ethereum_transaction_bool_exp
	id: String_comparison_exp
	name: String_comparison_exp
	origin: jsonb_comparison_exp
	parent_id: String_comparison_exp
	pos: Int_comparison_exp
	success: Boolean_comparison_exp
}

"""
aggregate max on columns
"""
type archive_call_max_fields {
	block_id: bpchar
	extrinsic_id: bpchar
	id: String
	name: String
	parent_id: String
	pos: Int
}

"""
order by max() on columns of table "call"
"""
input archive_call_max_order_by {
	block_id: order_by
	extrinsic_id: order_by
	id: order_by
	name: order_by
	parent_id: order_by
	pos: order_by
}

"""
aggregate min on columns
"""
type archive_call_min_fields {
	block_id: bpchar
	extrinsic_id: bpchar
	id: String
	name: String
	parent_id: String
	pos: Int
}

"""
order by min() on columns of table "call"
"""
input archive_call_min_order_by {
	block_id: order_by
	extrinsic_id: order_by
	id: order_by
	name: order_by
	parent_id: order_by
	pos: order_by
}

"""
Ordering options when selecting data from "call".
"""
input archive_call_order_by {
	args: order_by
	block: archive_block_order_by
	block_id: order_by
	call: archive_call_order_by
	calls_aggregate: archive_call_aggregate_order_by
	error: order_by
	events_aggregate: archive_event_aggregate_order_by
	extrinsic: archive_extrinsic_order_by
	extrinsic_id: order_by
	frontier_ethereum_transactions_aggregate: archive_frontier_ethereum_transaction_aggregate_order_by
	id: order_by
	name: order_by
	origin: order_by
	parent_id: order_by
	pos: order_by
	success: order_by
}

"""
select columns of table "call"
"""
enum archive_call_select_column {
	"""
	column name
	"""
	args

	"""
	column name
	"""
	block_id

	"""
	column name
	"""
	error

	"""
	column name
	"""
	extrinsic_id

	"""
	column name
	"""
	id

	"""
	column name
	"""
	name

	"""
	column name
	"""
	origin

	"""
	column name
	"""
	parent_id

	"""
	column name
	"""
	pos

	"""
	column name
	"""
	success
}

"""
aggregate stddev on columns
"""
type archive_call_stddev_fields {
	pos: Float
}

"""
order by stddev() on columns of table "call"
"""
input archive_call_stddev_order_by {
	pos: order_by
}

"""
aggregate stddev_pop on columns
"""
type archive_call_stddev_pop_fields {
	pos: Float
}

"""
order by stddev_pop() on columns of table "call"
"""
input archive_call_stddev_pop_order_by {
	pos: order_by
}

"""
aggregate stddev_samp on columns
"""
type archive_call_stddev_samp_fields {
	pos: Float
}

"""
order by stddev_samp() on columns of table "call"
"""
input archive_call_stddev_samp_order_by {
	pos: order_by
}

"""
Streaming cursor of the table "call"
"""
input archive_call_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_call_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_call_stream_cursor_value_input {
	args: jsonb
	block_id: bpchar
	error: jsonb
	extrinsic_id: bpchar
	id: String
	name: String
	origin: jsonb
	parent_id: String
	pos: Int
	success: Boolean
}

"""
aggregate sum on columns
"""
type archive_call_sum_fields {
	pos: Int
}

"""
order by sum() on columns of table "call"
"""
input archive_call_sum_order_by {
	pos: order_by
}

"""
aggregate var_pop on columns
"""
type archive_call_var_pop_fields {
	pos: Float
}

"""
order by var_pop() on columns of table "call"
"""
input archive_call_var_pop_order_by {
	pos: order_by
}

"""
aggregate var_samp on columns
"""
type archive_call_var_samp_fields {
	pos: Float
}

"""
order by var_samp() on columns of table "call"
"""
input archive_call_var_samp_order_by {
	pos: order_by
}

"""
aggregate variance on columns
"""
type archive_call_variance_fields {
	pos: Float
}

"""
order by variance() on columns of table "call"
"""
input archive_call_variance_order_by {
	pos: order_by
}

"""
columns and relationships of "contracts_contract_emitted"
"""
type archive_contracts_contract_emitted {
	contract: String!

	"""
	An object relationship
	"""
	event: archive_event!
	event_id: bpchar!
}

"""
aggregated selection of "contracts_contract_emitted"
"""
type archive_contracts_contract_emitted_aggregate {
	aggregate: archive_contracts_contract_emitted_aggregate_fields
	nodes: [archive_contracts_contract_emitted!]!
}

"""
aggregate fields of "contracts_contract_emitted"
"""
type archive_contracts_contract_emitted_aggregate_fields {
	count(
		columns: [archive_contracts_contract_emitted_select_column!]
		distinct: Boolean
	): Int!
	max: archive_contracts_contract_emitted_max_fields
	min: archive_contracts_contract_emitted_min_fields
}

"""
order by aggregate values of table "contracts_contract_emitted"
"""
input archive_contracts_contract_emitted_aggregate_order_by {
	count: order_by
	max: archive_contracts_contract_emitted_max_order_by
	min: archive_contracts_contract_emitted_min_order_by
}

"""
Boolean expression to filter rows from the table "contracts_contract_emitted". All fields are combined with a logical 'AND'.
"""
input archive_contracts_contract_emitted_bool_exp {
	_and: [archive_contracts_contract_emitted_bool_exp!]
	_not: archive_contracts_contract_emitted_bool_exp
	_or: [archive_contracts_contract_emitted_bool_exp!]
	contract: String_comparison_exp
	event: archive_event_bool_exp
	event_id: bpchar_comparison_exp
}

"""
aggregate max on columns
"""
type archive_contracts_contract_emitted_max_fields {
	contract: String
	event_id: bpchar
}

"""
order by max() on columns of table "contracts_contract_emitted"
"""
input archive_contracts_contract_emitted_max_order_by {
	contract: order_by
	event_id: order_by
}

"""
aggregate min on columns
"""
type archive_contracts_contract_emitted_min_fields {
	contract: String
	event_id: bpchar
}

"""
order by min() on columns of table "contracts_contract_emitted"
"""
input archive_contracts_contract_emitted_min_order_by {
	contract: order_by
	event_id: order_by
}

"""
Ordering options when selecting data from "contracts_contract_emitted".
"""
input archive_contracts_contract_emitted_order_by {
	contract: order_by
	event: archive_event_order_by
	event_id: order_by
}

"""
select columns of table "contracts_contract_emitted"
"""
enum archive_contracts_contract_emitted_select_column {
	"""
	column name
	"""
	contract

	"""
	column name
	"""
	event_id
}

"""
Streaming cursor of the table "contracts_contract_emitted"
"""
input archive_contracts_contract_emitted_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_contracts_contract_emitted_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_contracts_contract_emitted_stream_cursor_value_input {
	contract: String
	event_id: bpchar
}

"""
ordering argument of a cursor
"""
enum archive_cursor_ordering {
	"""
	ascending ordering of the cursor
	"""
	ASC

	"""
	descending ordering of the cursor
	"""
	DESC
}

"""
columns and relationships of "event"
"""
type archive_event {
	args(
		"""
		JSON select path
		"""
		path: String
	): jsonb

	"""
	An object relationship
	"""
	block: archive_block!
	block_id: bpchar!

	"""
	An object relationship
	"""
	call: archive_call
	call_id: String

	"""
	An array relationship
	"""
	contracts_contract_emitteds(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): [archive_contracts_contract_emitted!]!

	"""
	An aggregate relationship
	"""
	contracts_contract_emitteds_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_contracts_contract_emitted_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_contracts_contract_emitted_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_contracts_contract_emitted_bool_exp
	): archive_contracts_contract_emitted_aggregate!

	"""
	An object relationship
	"""
	extrinsic: archive_extrinsic
	extrinsic_id: bpchar

	"""
	An array relationship
	"""
	frontier_evm_logs(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): [archive_frontier_evm_log!]!

	"""
	An aggregate relationship
	"""
	frontier_evm_logs_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_frontier_evm_log_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_frontier_evm_log_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_frontier_evm_log_bool_exp
	): archive_frontier_evm_log_aggregate!
	id: bpchar!
	index_in_block: Int!
	name: String!
	phase: String!
	pos: Int!
}

"""
aggregated selection of "event"
"""
type archive_event_aggregate {
	aggregate: archive_event_aggregate_fields
	nodes: [archive_event!]!
}

"""
aggregate fields of "event"
"""
type archive_event_aggregate_fields {
	avg: archive_event_avg_fields
	count(columns: [archive_event_select_column!], distinct: Boolean): Int!
	max: archive_event_max_fields
	min: archive_event_min_fields
	stddev: archive_event_stddev_fields
	stddev_pop: archive_event_stddev_pop_fields
	stddev_samp: archive_event_stddev_samp_fields
	sum: archive_event_sum_fields
	var_pop: archive_event_var_pop_fields
	var_samp: archive_event_var_samp_fields
	variance: archive_event_variance_fields
}

"""
order by aggregate values of table "event"
"""
input archive_event_aggregate_order_by {
	avg: archive_event_avg_order_by
	count: order_by
	max: archive_event_max_order_by
	min: archive_event_min_order_by
	stddev: archive_event_stddev_order_by
	stddev_pop: archive_event_stddev_pop_order_by
	stddev_samp: archive_event_stddev_samp_order_by
	sum: archive_event_sum_order_by
	var_pop: archive_event_var_pop_order_by
	var_samp: archive_event_var_samp_order_by
	variance: archive_event_variance_order_by
}

"""
aggregate avg on columns
"""
type archive_event_avg_fields {
	index_in_block: Float
	pos: Float
}

"""
order by avg() on columns of table "event"
"""
input archive_event_avg_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
"""
input archive_event_bool_exp {
	_and: [archive_event_bool_exp!]
	_not: archive_event_bool_exp
	_or: [archive_event_bool_exp!]
	args: jsonb_comparison_exp
	block: archive_block_bool_exp
	block_id: bpchar_comparison_exp
	call: archive_call_bool_exp
	call_id: String_comparison_exp
	contracts_contract_emitteds: archive_contracts_contract_emitted_bool_exp
	extrinsic: archive_extrinsic_bool_exp
	extrinsic_id: bpchar_comparison_exp
	frontier_evm_logs: archive_frontier_evm_log_bool_exp
	id: bpchar_comparison_exp
	index_in_block: Int_comparison_exp
	name: String_comparison_exp
	phase: String_comparison_exp
	pos: Int_comparison_exp
}

"""
aggregate max on columns
"""
type archive_event_max_fields {
	block_id: bpchar
	call_id: String
	extrinsic_id: bpchar
	id: bpchar
	index_in_block: Int
	name: String
	phase: String
	pos: Int
}

"""
order by max() on columns of table "event"
"""
input archive_event_max_order_by {
	block_id: order_by
	call_id: order_by
	extrinsic_id: order_by
	id: order_by
	index_in_block: order_by
	name: order_by
	phase: order_by
	pos: order_by
}

"""
aggregate min on columns
"""
type archive_event_min_fields {
	block_id: bpchar
	call_id: String
	extrinsic_id: bpchar
	id: bpchar
	index_in_block: Int
	name: String
	phase: String
	pos: Int
}

"""
order by min() on columns of table "event"
"""
input archive_event_min_order_by {
	block_id: order_by
	call_id: order_by
	extrinsic_id: order_by
	id: order_by
	index_in_block: order_by
	name: order_by
	phase: order_by
	pos: order_by
}

"""
Ordering options when selecting data from "event".
"""
input archive_event_order_by {
	args: order_by
	block: archive_block_order_by
	block_id: order_by
	call: archive_call_order_by
	call_id: order_by
	contracts_contract_emitteds_aggregate: archive_contracts_contract_emitted_aggregate_order_by
	extrinsic: archive_extrinsic_order_by
	extrinsic_id: order_by
	frontier_evm_logs_aggregate: archive_frontier_evm_log_aggregate_order_by
	id: order_by
	index_in_block: order_by
	name: order_by
	phase: order_by
	pos: order_by
}

"""
select columns of table "event"
"""
enum archive_event_select_column {
	"""
	column name
	"""
	args

	"""
	column name
	"""
	block_id

	"""
	column name
	"""
	call_id

	"""
	column name
	"""
	extrinsic_id

	"""
	column name
	"""
	id

	"""
	column name
	"""
	index_in_block

	"""
	column name
	"""
	name

	"""
	column name
	"""
	phase

	"""
	column name
	"""
	pos
}

"""
aggregate stddev on columns
"""
type archive_event_stddev_fields {
	index_in_block: Float
	pos: Float
}

"""
order by stddev() on columns of table "event"
"""
input archive_event_stddev_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
aggregate stddev_pop on columns
"""
type archive_event_stddev_pop_fields {
	index_in_block: Float
	pos: Float
}

"""
order by stddev_pop() on columns of table "event"
"""
input archive_event_stddev_pop_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
aggregate stddev_samp on columns
"""
type archive_event_stddev_samp_fields {
	index_in_block: Float
	pos: Float
}

"""
order by stddev_samp() on columns of table "event"
"""
input archive_event_stddev_samp_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
Streaming cursor of the table "event"
"""
input archive_event_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_event_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_event_stream_cursor_value_input {
	args: jsonb
	block_id: bpchar
	call_id: String
	extrinsic_id: bpchar
	id: bpchar
	index_in_block: Int
	name: String
	phase: String
	pos: Int
}

"""
aggregate sum on columns
"""
type archive_event_sum_fields {
	index_in_block: Int
	pos: Int
}

"""
order by sum() on columns of table "event"
"""
input archive_event_sum_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
aggregate var_pop on columns
"""
type archive_event_var_pop_fields {
	index_in_block: Float
	pos: Float
}

"""
order by var_pop() on columns of table "event"
"""
input archive_event_var_pop_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
aggregate var_samp on columns
"""
type archive_event_var_samp_fields {
	index_in_block: Float
	pos: Float
}

"""
order by var_samp() on columns of table "event"
"""
input archive_event_var_samp_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
aggregate variance on columns
"""
type archive_event_variance_fields {
	index_in_block: Float
	pos: Float
}

"""
order by variance() on columns of table "event"
"""
input archive_event_variance_order_by {
	index_in_block: order_by
	pos: order_by
}

"""
columns and relationships of "extrinsic"
"""
type archive_extrinsic {
	"""
	An object relationship
	"""
	block: archive_block!
	block_id: bpchar!
	call_id: String!

	"""
	An array relationship
	"""
	calls(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): [archive_call!]!

	"""
	An aggregate relationship
	"""
	calls_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_call_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_call_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_call_bool_exp
	): archive_call_aggregate!
	error(
		"""
		JSON select path
		"""
		path: String
	): jsonb

	"""
	An array relationship
	"""
	events(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): [archive_event!]!

	"""
	An aggregate relationship
	"""
	events_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [archive_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [archive_event_order_by!]

		"""
		filter the rows returned
		"""
		where: archive_event_bool_exp
	): archive_event_aggregate!
	fee: numeric
	hash: bpchar!
	id: bpchar!
	index_in_block: Int!
	pos: Int!
	signature(
		"""
		JSON select path
		"""
		path: String
	): jsonb
	success: Boolean!
	tip: numeric
	version: Int!
}

"""
aggregated selection of "extrinsic"
"""
type archive_extrinsic_aggregate {
	aggregate: archive_extrinsic_aggregate_fields
	nodes: [archive_extrinsic!]!
}

"""
aggregate fields of "extrinsic"
"""
type archive_extrinsic_aggregate_fields {
	avg: archive_extrinsic_avg_fields
	count(columns: [archive_extrinsic_select_column!], distinct: Boolean): Int!
	max: archive_extrinsic_max_fields
	min: archive_extrinsic_min_fields
	stddev: archive_extrinsic_stddev_fields
	stddev_pop: archive_extrinsic_stddev_pop_fields
	stddev_samp: archive_extrinsic_stddev_samp_fields
	sum: archive_extrinsic_sum_fields
	var_pop: archive_extrinsic_var_pop_fields
	var_samp: archive_extrinsic_var_samp_fields
	variance: archive_extrinsic_variance_fields
}

"""
order by aggregate values of table "extrinsic"
"""
input archive_extrinsic_aggregate_order_by {
	avg: archive_extrinsic_avg_order_by
	count: order_by
	max: archive_extrinsic_max_order_by
	min: archive_extrinsic_min_order_by
	stddev: archive_extrinsic_stddev_order_by
	stddev_pop: archive_extrinsic_stddev_pop_order_by
	stddev_samp: archive_extrinsic_stddev_samp_order_by
	sum: archive_extrinsic_sum_order_by
	var_pop: archive_extrinsic_var_pop_order_by
	var_samp: archive_extrinsic_var_samp_order_by
	variance: archive_extrinsic_variance_order_by
}

"""
aggregate avg on columns
"""
type archive_extrinsic_avg_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by avg() on columns of table "extrinsic"
"""
input archive_extrinsic_avg_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
Boolean expression to filter rows from the table "extrinsic". All fields are combined with a logical 'AND'.
"""
input archive_extrinsic_bool_exp {
	_and: [archive_extrinsic_bool_exp!]
	_not: archive_extrinsic_bool_exp
	_or: [archive_extrinsic_bool_exp!]
	block: archive_block_bool_exp
	block_id: bpchar_comparison_exp
	call_id: String_comparison_exp
	calls: archive_call_bool_exp
	error: jsonb_comparison_exp
	events: archive_event_bool_exp
	fee: numeric_comparison_exp
	hash: bpchar_comparison_exp
	id: bpchar_comparison_exp
	index_in_block: Int_comparison_exp
	pos: Int_comparison_exp
	signature: jsonb_comparison_exp
	success: Boolean_comparison_exp
	tip: numeric_comparison_exp
	version: Int_comparison_exp
}

"""
aggregate max on columns
"""
type archive_extrinsic_max_fields {
	block_id: bpchar
	call_id: String
	fee: numeric
	hash: bpchar
	id: bpchar
	index_in_block: Int
	pos: Int
	tip: numeric
	version: Int
}

"""
order by max() on columns of table "extrinsic"
"""
input archive_extrinsic_max_order_by {
	block_id: order_by
	call_id: order_by
	fee: order_by
	hash: order_by
	id: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate min on columns
"""
type archive_extrinsic_min_fields {
	block_id: bpchar
	call_id: String
	fee: numeric
	hash: bpchar
	id: bpchar
	index_in_block: Int
	pos: Int
	tip: numeric
	version: Int
}

"""
order by min() on columns of table "extrinsic"
"""
input archive_extrinsic_min_order_by {
	block_id: order_by
	call_id: order_by
	fee: order_by
	hash: order_by
	id: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
Ordering options when selecting data from "extrinsic".
"""
input archive_extrinsic_order_by {
	block: archive_block_order_by
	block_id: order_by
	call_id: order_by
	calls_aggregate: archive_call_aggregate_order_by
	error: order_by
	events_aggregate: archive_event_aggregate_order_by
	fee: order_by
	hash: order_by
	id: order_by
	index_in_block: order_by
	pos: order_by
	signature: order_by
	success: order_by
	tip: order_by
	version: order_by
}

"""
select columns of table "extrinsic"
"""
enum archive_extrinsic_select_column {
	"""
	column name
	"""
	block_id

	"""
	column name
	"""
	call_id

	"""
	column name
	"""
	error

	"""
	column name
	"""
	fee

	"""
	column name
	"""
	hash

	"""
	column name
	"""
	id

	"""
	column name
	"""
	index_in_block

	"""
	column name
	"""
	pos

	"""
	column name
	"""
	signature

	"""
	column name
	"""
	success

	"""
	column name
	"""
	tip

	"""
	column name
	"""
	version
}

"""
aggregate stddev on columns
"""
type archive_extrinsic_stddev_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by stddev() on columns of table "extrinsic"
"""
input archive_extrinsic_stddev_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate stddev_pop on columns
"""
type archive_extrinsic_stddev_pop_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by stddev_pop() on columns of table "extrinsic"
"""
input archive_extrinsic_stddev_pop_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate stddev_samp on columns
"""
type archive_extrinsic_stddev_samp_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by stddev_samp() on columns of table "extrinsic"
"""
input archive_extrinsic_stddev_samp_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
Streaming cursor of the table "extrinsic"
"""
input archive_extrinsic_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_extrinsic_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_extrinsic_stream_cursor_value_input {
	block_id: bpchar
	call_id: String
	error: jsonb
	fee: numeric
	hash: bpchar
	id: bpchar
	index_in_block: Int
	pos: Int
	signature: jsonb
	success: Boolean
	tip: numeric
	version: Int
}

"""
aggregate sum on columns
"""
type archive_extrinsic_sum_fields {
	fee: numeric
	index_in_block: Int
	pos: Int
	tip: numeric
	version: Int
}

"""
order by sum() on columns of table "extrinsic"
"""
input archive_extrinsic_sum_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate var_pop on columns
"""
type archive_extrinsic_var_pop_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by var_pop() on columns of table "extrinsic"
"""
input archive_extrinsic_var_pop_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate var_samp on columns
"""
type archive_extrinsic_var_samp_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by var_samp() on columns of table "extrinsic"
"""
input archive_extrinsic_var_samp_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
aggregate variance on columns
"""
type archive_extrinsic_variance_fields {
	fee: Float
	index_in_block: Float
	pos: Float
	tip: Float
	version: Float
}

"""
order by variance() on columns of table "extrinsic"
"""
input archive_extrinsic_variance_order_by {
	fee: order_by
	index_in_block: order_by
	pos: order_by
	tip: order_by
	version: order_by
}

"""
columns and relationships of "frontier_ethereum_transaction"
"""
type archive_frontier_ethereum_transaction {
	"""
	An object relationship
	"""
	call: archive_call!
	call_id: String!
	contract: bpchar!
	sighash: String
}

"""
aggregated selection of "frontier_ethereum_transaction"
"""
type archive_frontier_ethereum_transaction_aggregate {
	aggregate: archive_frontier_ethereum_transaction_aggregate_fields
	nodes: [archive_frontier_ethereum_transaction!]!
}

"""
aggregate fields of "frontier_ethereum_transaction"
"""
type archive_frontier_ethereum_transaction_aggregate_fields {
	count(
		columns: [archive_frontier_ethereum_transaction_select_column!]
		distinct: Boolean
	): Int!
	max: archive_frontier_ethereum_transaction_max_fields
	min: archive_frontier_ethereum_transaction_min_fields
}

"""
order by aggregate values of table "frontier_ethereum_transaction"
"""
input archive_frontier_ethereum_transaction_aggregate_order_by {
	count: order_by
	max: archive_frontier_ethereum_transaction_max_order_by
	min: archive_frontier_ethereum_transaction_min_order_by
}

"""
Boolean expression to filter rows from the table "frontier_ethereum_transaction". All fields are combined with a logical 'AND'.
"""
input archive_frontier_ethereum_transaction_bool_exp {
	_and: [archive_frontier_ethereum_transaction_bool_exp!]
	_not: archive_frontier_ethereum_transaction_bool_exp
	_or: [archive_frontier_ethereum_transaction_bool_exp!]
	call: archive_call_bool_exp
	call_id: String_comparison_exp
	contract: bpchar_comparison_exp
	sighash: String_comparison_exp
}

"""
aggregate max on columns
"""
type archive_frontier_ethereum_transaction_max_fields {
	call_id: String
	contract: bpchar
	sighash: String
}

"""
order by max() on columns of table "frontier_ethereum_transaction"
"""
input archive_frontier_ethereum_transaction_max_order_by {
	call_id: order_by
	contract: order_by
	sighash: order_by
}

"""
aggregate min on columns
"""
type archive_frontier_ethereum_transaction_min_fields {
	call_id: String
	contract: bpchar
	sighash: String
}

"""
order by min() on columns of table "frontier_ethereum_transaction"
"""
input archive_frontier_ethereum_transaction_min_order_by {
	call_id: order_by
	contract: order_by
	sighash: order_by
}

"""
Ordering options when selecting data from "frontier_ethereum_transaction".
"""
input archive_frontier_ethereum_transaction_order_by {
	call: archive_call_order_by
	call_id: order_by
	contract: order_by
	sighash: order_by
}

"""
select columns of table "frontier_ethereum_transaction"
"""
enum archive_frontier_ethereum_transaction_select_column {
	"""
	column name
	"""
	call_id

	"""
	column name
	"""
	contract

	"""
	column name
	"""
	sighash
}

"""
Streaming cursor of the table "frontier_ethereum_transaction"
"""
input archive_frontier_ethereum_transaction_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_frontier_ethereum_transaction_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_frontier_ethereum_transaction_stream_cursor_value_input {
	call_id: String
	contract: bpchar
	sighash: String
}

"""
columns and relationships of "frontier_evm_log"
"""
type archive_frontier_evm_log {
	contract: bpchar!

	"""
	An object relationship
	"""
	event: archive_event!
	event_id: bpchar!
	topic0: bpchar
	topic1: bpchar
	topic2: bpchar
	topic3: bpchar
}

"""
aggregated selection of "frontier_evm_log"
"""
type archive_frontier_evm_log_aggregate {
	aggregate: archive_frontier_evm_log_aggregate_fields
	nodes: [archive_frontier_evm_log!]!
}

"""
aggregate fields of "frontier_evm_log"
"""
type archive_frontier_evm_log_aggregate_fields {
	count(
		columns: [archive_frontier_evm_log_select_column!]
		distinct: Boolean
	): Int!
	max: archive_frontier_evm_log_max_fields
	min: archive_frontier_evm_log_min_fields
}

"""
order by aggregate values of table "frontier_evm_log"
"""
input archive_frontier_evm_log_aggregate_order_by {
	count: order_by
	max: archive_frontier_evm_log_max_order_by
	min: archive_frontier_evm_log_min_order_by
}

"""
Boolean expression to filter rows from the table "frontier_evm_log". All fields are combined with a logical 'AND'.
"""
input archive_frontier_evm_log_bool_exp {
	_and: [archive_frontier_evm_log_bool_exp!]
	_not: archive_frontier_evm_log_bool_exp
	_or: [archive_frontier_evm_log_bool_exp!]
	contract: bpchar_comparison_exp
	event: archive_event_bool_exp
	event_id: bpchar_comparison_exp
	topic0: bpchar_comparison_exp
	topic1: bpchar_comparison_exp
	topic2: bpchar_comparison_exp
	topic3: bpchar_comparison_exp
}

"""
aggregate max on columns
"""
type archive_frontier_evm_log_max_fields {
	contract: bpchar
	event_id: bpchar
	topic0: bpchar
	topic1: bpchar
	topic2: bpchar
	topic3: bpchar
}

"""
order by max() on columns of table "frontier_evm_log"
"""
input archive_frontier_evm_log_max_order_by {
	contract: order_by
	event_id: order_by
	topic0: order_by
	topic1: order_by
	topic2: order_by
	topic3: order_by
}

"""
aggregate min on columns
"""
type archive_frontier_evm_log_min_fields {
	contract: bpchar
	event_id: bpchar
	topic0: bpchar
	topic1: bpchar
	topic2: bpchar
	topic3: bpchar
}

"""
order by min() on columns of table "frontier_evm_log"
"""
input archive_frontier_evm_log_min_order_by {
	contract: order_by
	event_id: order_by
	topic0: order_by
	topic1: order_by
	topic2: order_by
	topic3: order_by
}

"""
Ordering options when selecting data from "frontier_evm_log".
"""
input archive_frontier_evm_log_order_by {
	contract: order_by
	event: archive_event_order_by
	event_id: order_by
	topic0: order_by
	topic1: order_by
	topic2: order_by
	topic3: order_by
}

"""
select columns of table "frontier_evm_log"
"""
enum archive_frontier_evm_log_select_column {
	"""
	column name
	"""
	contract

	"""
	column name
	"""
	event_id

	"""
	column name
	"""
	topic0

	"""
	column name
	"""
	topic1

	"""
	column name
	"""
	topic2

	"""
	column name
	"""
	topic3
}

"""
Streaming cursor of the table "frontier_evm_log"
"""
input archive_frontier_evm_log_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_frontier_evm_log_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_frontier_evm_log_stream_cursor_value_input {
	contract: bpchar
	event_id: bpchar
	topic0: bpchar
	topic1: bpchar
	topic2: bpchar
	topic3: bpchar
}

"""
columns and relationships of "metadata"
"""
type archive_metadata {
	block_hash: bpchar!
	block_height: Int!
	hex: String!
	id: String!
	spec_name: String!
	spec_version: Int
}

"""
aggregated selection of "metadata"
"""
type archive_metadata_aggregate {
	aggregate: archive_metadata_aggregate_fields
	nodes: [archive_metadata!]!
}

"""
aggregate fields of "metadata"
"""
type archive_metadata_aggregate_fields {
	avg: archive_metadata_avg_fields
	count(columns: [archive_metadata_select_column!], distinct: Boolean): Int!
	max: archive_metadata_max_fields
	min: archive_metadata_min_fields
	stddev: archive_metadata_stddev_fields
	stddev_pop: archive_metadata_stddev_pop_fields
	stddev_samp: archive_metadata_stddev_samp_fields
	sum: archive_metadata_sum_fields
	var_pop: archive_metadata_var_pop_fields
	var_samp: archive_metadata_var_samp_fields
	variance: archive_metadata_variance_fields
}

"""
aggregate avg on columns
"""
type archive_metadata_avg_fields {
	block_height: Float
	spec_version: Float
}

"""
Boolean expression to filter rows from the table "metadata". All fields are combined with a logical 'AND'.
"""
input archive_metadata_bool_exp {
	_and: [archive_metadata_bool_exp!]
	_not: archive_metadata_bool_exp
	_or: [archive_metadata_bool_exp!]
	block_hash: bpchar_comparison_exp
	block_height: Int_comparison_exp
	hex: String_comparison_exp
	id: String_comparison_exp
	spec_name: String_comparison_exp
	spec_version: Int_comparison_exp
}

"""
aggregate max on columns
"""
type archive_metadata_max_fields {
	block_hash: bpchar
	block_height: Int
	hex: String
	id: String
	spec_name: String
	spec_version: Int
}

"""
aggregate min on columns
"""
type archive_metadata_min_fields {
	block_hash: bpchar
	block_height: Int
	hex: String
	id: String
	spec_name: String
	spec_version: Int
}

"""
Ordering options when selecting data from "metadata".
"""
input archive_metadata_order_by {
	block_hash: order_by
	block_height: order_by
	hex: order_by
	id: order_by
	spec_name: order_by
	spec_version: order_by
}

"""
select columns of table "metadata"
"""
enum archive_metadata_select_column {
	"""
	column name
	"""
	block_hash

	"""
	column name
	"""
	block_height

	"""
	column name
	"""
	hex

	"""
	column name
	"""
	id

	"""
	column name
	"""
	spec_name

	"""
	column name
	"""
	spec_version
}

"""
aggregate stddev on columns
"""
type archive_metadata_stddev_fields {
	block_height: Float
	spec_version: Float
}

"""
aggregate stddev_pop on columns
"""
type archive_metadata_stddev_pop_fields {
	block_height: Float
	spec_version: Float
}

"""
aggregate stddev_samp on columns
"""
type archive_metadata_stddev_samp_fields {
	block_height: Float
	spec_version: Float
}

"""
Streaming cursor of the table "metadata"
"""
input archive_metadata_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: archive_metadata_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: archive_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input archive_metadata_stream_cursor_value_input {
	block_hash: bpchar
	block_height: Int
	hex: String
	id: String
	spec_name: String
	spec_version: Int
}

"""
aggregate sum on columns
"""
type archive_metadata_sum_fields {
	block_height: Int
	spec_version: Int
}

"""
aggregate var_pop on columns
"""
type archive_metadata_var_pop_fields {
	block_height: Float
	spec_version: Float
}

"""
aggregate var_samp on columns
"""
type archive_metadata_var_samp_fields {
	block_height: Float
	spec_version: Float
}

"""
aggregate variance on columns
"""
type archive_metadata_variance_fields {
	block_height: Float
	spec_version: Float
}

"""
columns and relationships of "squid_processor.account"
"""
type balances_account {
	assets(
		"""
		JSON select path
		"""
		path: String
	): jsonb
	free: numeric!
	id: String!
	reserved: numeric!
	total: numeric!

	"""
	An array relationship
	"""
	transfers(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): [balances_transfer!]!

	"""
	An array relationship
	"""
	transfersByFromId(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): [balances_transfer!]!

	"""
	An aggregate relationship
	"""
	transfersByFromId_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): balances_transfer_aggregate!

	"""
	An aggregate relationship
	"""
	transfers_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): balances_transfer_aggregate!
	updated_at: Int
}

"""
aggregated selection of "squid_processor.account"
"""
type balances_account_aggregate {
	aggregate: balances_account_aggregate_fields
	nodes: [balances_account!]!
}

"""
aggregate fields of "squid_processor.account"
"""
type balances_account_aggregate_fields {
	avg: balances_account_avg_fields
	count(columns: [balances_account_select_column!], distinct: Boolean): Int!
	max: balances_account_max_fields
	min: balances_account_min_fields
	stddev: balances_account_stddev_fields
	stddev_pop: balances_account_stddev_pop_fields
	stddev_samp: balances_account_stddev_samp_fields
	sum: balances_account_sum_fields
	var_pop: balances_account_var_pop_fields
	var_samp: balances_account_var_samp_fields
	variance: balances_account_variance_fields
}

"""
aggregate avg on columns
"""
type balances_account_avg_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
Boolean expression to filter rows from the table "squid_processor.account". All fields are combined with a logical 'AND'.
"""
input balances_account_bool_exp {
	_and: [balances_account_bool_exp!]
	_not: balances_account_bool_exp
	_or: [balances_account_bool_exp!]
	assets: jsonb_comparison_exp
	free: numeric_comparison_exp
	id: String_comparison_exp
	reserved: numeric_comparison_exp
	total: numeric_comparison_exp
	transfers: balances_transfer_bool_exp
	transfersByFromId: balances_transfer_bool_exp
	updated_at: Int_comparison_exp
}

"""
aggregate max on columns
"""
type balances_account_max_fields {
	free: numeric
	id: String
	reserved: numeric
	total: numeric
	updated_at: Int
}

"""
aggregate min on columns
"""
type balances_account_min_fields {
	free: numeric
	id: String
	reserved: numeric
	total: numeric
	updated_at: Int
}

"""
Ordering options when selecting data from "squid_processor.account".
"""
input balances_account_order_by {
	assets: order_by
	free: order_by
	id: order_by
	reserved: order_by
	total: order_by
	transfersByFromId_aggregate: balances_transfer_aggregate_order_by
	transfers_aggregate: balances_transfer_aggregate_order_by
	updated_at: order_by
}

"""
select columns of table "squid_processor.account"
"""
enum balances_account_select_column {
	"""
	column name
	"""
	assets

	"""
	column name
	"""
	free

	"""
	column name
	"""
	id

	"""
	column name
	"""
	reserved

	"""
	column name
	"""
	total

	"""
	column name
	"""
	updated_at
}

"""
aggregate stddev on columns
"""
type balances_account_stddev_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
aggregate stddev_pop on columns
"""
type balances_account_stddev_pop_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
aggregate stddev_samp on columns
"""
type balances_account_stddev_samp_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
Streaming cursor of the table "account"
"""
input balances_account_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: balances_account_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: balances_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input balances_account_stream_cursor_value_input {
	assets: jsonb
	free: numeric
	id: String
	reserved: numeric
	total: numeric
	updated_at: Int
}

"""
aggregate sum on columns
"""
type balances_account_sum_fields {
	free: numeric
	reserved: numeric
	total: numeric
	updated_at: Int
}

"""
aggregate var_pop on columns
"""
type balances_account_var_pop_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
aggregate var_samp on columns
"""
type balances_account_var_samp_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

"""
aggregate variance on columns
"""
type balances_account_variance_fields {
	free: Float
	reserved: Float
	total: Float
	updated_at: Float
}

type balances_balances_query {
	"""
	fetch data from the table: "squid_processor.account"
	"""
	account(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_account_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_account_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_account_bool_exp
	): [balances_account!]!

	"""
	fetch aggregated fields from the table: "squid_processor.account"
	"""
	account_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_account_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_account_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_account_bool_exp
	): balances_account_aggregate!

	"""
	fetch data from the table: "squid_processor.account" using primary key columns
	"""
	account_by_pk(id: String!): balances_account

	"""
	fetch data from the table: "squid_processor.chain_state"
	"""
	chain_state(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_chain_state_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_chain_state_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_chain_state_bool_exp
	): [balances_chain_state!]!

	"""
	fetch aggregated fields from the table: "squid_processor.chain_state"
	"""
	chain_state_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_chain_state_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_chain_state_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_chain_state_bool_exp
	): balances_chain_state_aggregate!

	"""
	fetch data from the table: "squid_processor.chain_state" using primary key columns
	"""
	chain_state_by_pk(id: String!): balances_chain_state

	"""
	fetch data from the table: "squid_processor.transfer"
	"""
	transfer(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): [balances_transfer!]!

	"""
	fetch aggregated fields from the table: "squid_processor.transfer"
	"""
	transfer_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): balances_transfer_aggregate!

	"""
	fetch data from the table: "squid_processor.transfer" using primary key columns
	"""
	transfer_by_pk(id: String!): balances_transfer
}

type balances_balances_subscription {
	"""
	fetch data from the table: "squid_processor.account"
	"""
	account(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_account_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_account_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_account_bool_exp
	): [balances_account!]!

	"""
	fetch aggregated fields from the table: "squid_processor.account"
	"""
	account_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_account_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_account_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_account_bool_exp
	): balances_account_aggregate!

	"""
	fetch data from the table: "squid_processor.account" using primary key columns
	"""
	account_by_pk(id: String!): balances_account

	"""
	fetch data from the table in a streaming manner : "squid_processor.account"
	"""
	account_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [balances_account_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: balances_account_bool_exp
	): [balances_account!]!

	"""
	fetch data from the table: "squid_processor.chain_state"
	"""
	chain_state(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_chain_state_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_chain_state_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_chain_state_bool_exp
	): [balances_chain_state!]!

	"""
	fetch aggregated fields from the table: "squid_processor.chain_state"
	"""
	chain_state_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_chain_state_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_chain_state_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_chain_state_bool_exp
	): balances_chain_state_aggregate!

	"""
	fetch data from the table: "squid_processor.chain_state" using primary key columns
	"""
	chain_state_by_pk(id: String!): balances_chain_state

	"""
	fetch data from the table in a streaming manner : "squid_processor.chain_state"
	"""
	chain_state_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [balances_chain_state_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: balances_chain_state_bool_exp
	): [balances_chain_state!]!

	"""
	fetch data from the table: "squid_processor.transfer"
	"""
	transfer(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): [balances_transfer!]!

	"""
	fetch aggregated fields from the table: "squid_processor.transfer"
	"""
	transfer_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [balances_transfer_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [balances_transfer_order_by!]

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): balances_transfer_aggregate!

	"""
	fetch data from the table: "squid_processor.transfer" using primary key columns
	"""
	transfer_by_pk(id: String!): balances_transfer

	"""
	fetch data from the table in a streaming manner : "squid_processor.transfer"
	"""
	transfer_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [balances_transfer_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: balances_transfer_bool_exp
	): [balances_transfer!]!
}

"""
columns and relationships of "squid_processor.chain_state"
"""
type balances_chain_state {
	block_number: Int!
	id: String!
	timestamp: timestamptz!
	token_balance: numeric!
	token_holders: Int!
}

"""
aggregated selection of "squid_processor.chain_state"
"""
type balances_chain_state_aggregate {
	aggregate: balances_chain_state_aggregate_fields
	nodes: [balances_chain_state!]!
}

"""
aggregate fields of "squid_processor.chain_state"
"""
type balances_chain_state_aggregate_fields {
	avg: balances_chain_state_avg_fields
	count(columns: [balances_chain_state_select_column!], distinct: Boolean): Int!
	max: balances_chain_state_max_fields
	min: balances_chain_state_min_fields
	stddev: balances_chain_state_stddev_fields
	stddev_pop: balances_chain_state_stddev_pop_fields
	stddev_samp: balances_chain_state_stddev_samp_fields
	sum: balances_chain_state_sum_fields
	var_pop: balances_chain_state_var_pop_fields
	var_samp: balances_chain_state_var_samp_fields
	variance: balances_chain_state_variance_fields
}

"""
aggregate avg on columns
"""
type balances_chain_state_avg_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
Boolean expression to filter rows from the table "squid_processor.chain_state". All fields are combined with a logical 'AND'.
"""
input balances_chain_state_bool_exp {
	_and: [balances_chain_state_bool_exp!]
	_not: balances_chain_state_bool_exp
	_or: [balances_chain_state_bool_exp!]
	block_number: Int_comparison_exp
	id: String_comparison_exp
	timestamp: timestamptz_comparison_exp
	token_balance: numeric_comparison_exp
	token_holders: Int_comparison_exp
}

"""
aggregate max on columns
"""
type balances_chain_state_max_fields {
	block_number: Int
	id: String
	timestamp: timestamptz
	token_balance: numeric
	token_holders: Int
}

"""
aggregate min on columns
"""
type balances_chain_state_min_fields {
	block_number: Int
	id: String
	timestamp: timestamptz
	token_balance: numeric
	token_holders: Int
}

"""
Ordering options when selecting data from "squid_processor.chain_state".
"""
input balances_chain_state_order_by {
	block_number: order_by
	id: order_by
	timestamp: order_by
	token_balance: order_by
	token_holders: order_by
}

"""
select columns of table "squid_processor.chain_state"
"""
enum balances_chain_state_select_column {
	"""
	column name
	"""
	block_number

	"""
	column name
	"""
	id

	"""
	column name
	"""
	timestamp

	"""
	column name
	"""
	token_balance

	"""
	column name
	"""
	token_holders
}

"""
aggregate stddev on columns
"""
type balances_chain_state_stddev_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
aggregate stddev_pop on columns
"""
type balances_chain_state_stddev_pop_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
aggregate stddev_samp on columns
"""
type balances_chain_state_stddev_samp_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
Streaming cursor of the table "chain_state"
"""
input balances_chain_state_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: balances_chain_state_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: balances_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input balances_chain_state_stream_cursor_value_input {
	block_number: Int
	id: String
	timestamp: timestamptz
	token_balance: numeric
	token_holders: Int
}

"""
aggregate sum on columns
"""
type balances_chain_state_sum_fields {
	block_number: Int
	token_balance: numeric
	token_holders: Int
}

"""
aggregate var_pop on columns
"""
type balances_chain_state_var_pop_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
aggregate var_samp on columns
"""
type balances_chain_state_var_samp_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
aggregate variance on columns
"""
type balances_chain_state_variance_fields {
	block_number: Float
	token_balance: Float
	token_holders: Float
}

"""
ordering argument of a cursor
"""
enum balances_cursor_ordering {
	"""
	ascending ordering of the cursor
	"""
	ASC

	"""
	descending ordering of the cursor
	"""
	DESC
}

"""
columns and relationships of "squid_processor.transfer"
"""
type balances_transfer {
	"""
	An object relationship
	"""
	account: balances_account

	"""
	An object relationship
	"""
	accountByFromId: balances_account
	amount: numeric!
	asset_id: String!
	block_number: Int!
	extrinsic_hash: String
	from_id: String
	id: String!
	status: String!
	timestamp: timestamptz!
	to_id: String
}

"""
aggregated selection of "squid_processor.transfer"
"""
type balances_transfer_aggregate {
	aggregate: balances_transfer_aggregate_fields
	nodes: [balances_transfer!]!
}

"""
aggregate fields of "squid_processor.transfer"
"""
type balances_transfer_aggregate_fields {
	avg: balances_transfer_avg_fields
	count(columns: [balances_transfer_select_column!], distinct: Boolean): Int!
	max: balances_transfer_max_fields
	min: balances_transfer_min_fields
	stddev: balances_transfer_stddev_fields
	stddev_pop: balances_transfer_stddev_pop_fields
	stddev_samp: balances_transfer_stddev_samp_fields
	sum: balances_transfer_sum_fields
	var_pop: balances_transfer_var_pop_fields
	var_samp: balances_transfer_var_samp_fields
	variance: balances_transfer_variance_fields
}

"""
order by aggregate values of table "squid_processor.transfer"
"""
input balances_transfer_aggregate_order_by {
	avg: balances_transfer_avg_order_by
	count: order_by
	max: balances_transfer_max_order_by
	min: balances_transfer_min_order_by
	stddev: balances_transfer_stddev_order_by
	stddev_pop: balances_transfer_stddev_pop_order_by
	stddev_samp: balances_transfer_stddev_samp_order_by
	sum: balances_transfer_sum_order_by
	var_pop: balances_transfer_var_pop_order_by
	var_samp: balances_transfer_var_samp_order_by
	variance: balances_transfer_variance_order_by
}

"""
aggregate avg on columns
"""
type balances_transfer_avg_fields {
	amount: Float
	block_number: Float
}

"""
order by avg() on columns of table "squid_processor.transfer"
"""
input balances_transfer_avg_order_by {
	amount: order_by
	block_number: order_by
}

"""
Boolean expression to filter rows from the table "squid_processor.transfer". All fields are combined with a logical 'AND'.
"""
input balances_transfer_bool_exp {
	_and: [balances_transfer_bool_exp!]
	_not: balances_transfer_bool_exp
	_or: [balances_transfer_bool_exp!]
	account: balances_account_bool_exp
	accountByFromId: balances_account_bool_exp
	amount: numeric_comparison_exp
	asset_id: String_comparison_exp
	block_number: Int_comparison_exp
	extrinsic_hash: String_comparison_exp
	from_id: String_comparison_exp
	id: String_comparison_exp
	status: String_comparison_exp
	timestamp: timestamptz_comparison_exp
	to_id: String_comparison_exp
}

"""
aggregate max on columns
"""
type balances_transfer_max_fields {
	amount: numeric
	asset_id: String
	block_number: Int
	extrinsic_hash: String
	from_id: String
	id: String
	status: String
	timestamp: timestamptz
	to_id: String
}

"""
order by max() on columns of table "squid_processor.transfer"
"""
input balances_transfer_max_order_by {
	amount: order_by
	asset_id: order_by
	block_number: order_by
	extrinsic_hash: order_by
	from_id: order_by
	id: order_by
	status: order_by
	timestamp: order_by
	to_id: order_by
}

"""
aggregate min on columns
"""
type balances_transfer_min_fields {
	amount: numeric
	asset_id: String
	block_number: Int
	extrinsic_hash: String
	from_id: String
	id: String
	status: String
	timestamp: timestamptz
	to_id: String
}

"""
order by min() on columns of table "squid_processor.transfer"
"""
input balances_transfer_min_order_by {
	amount: order_by
	asset_id: order_by
	block_number: order_by
	extrinsic_hash: order_by
	from_id: order_by
	id: order_by
	status: order_by
	timestamp: order_by
	to_id: order_by
}

"""
Ordering options when selecting data from "squid_processor.transfer".
"""
input balances_transfer_order_by {
	account: balances_account_order_by
	accountByFromId: balances_account_order_by
	amount: order_by
	asset_id: order_by
	block_number: order_by
	extrinsic_hash: order_by
	from_id: order_by
	id: order_by
	status: order_by
	timestamp: order_by
	to_id: order_by
}

"""
select columns of table "squid_processor.transfer"
"""
enum balances_transfer_select_column {
	"""
	column name
	"""
	amount

	"""
	column name
	"""
	asset_id

	"""
	column name
	"""
	block_number

	"""
	column name
	"""
	extrinsic_hash

	"""
	column name
	"""
	from_id

	"""
	column name
	"""
	id

	"""
	column name
	"""
	status

	"""
	column name
	"""
	timestamp

	"""
	column name
	"""
	to_id
}

"""
aggregate stddev on columns
"""
type balances_transfer_stddev_fields {
	amount: Float
	block_number: Float
}

"""
order by stddev() on columns of table "squid_processor.transfer"
"""
input balances_transfer_stddev_order_by {
	amount: order_by
	block_number: order_by
}

"""
aggregate stddev_pop on columns
"""
type balances_transfer_stddev_pop_fields {
	amount: Float
	block_number: Float
}

"""
order by stddev_pop() on columns of table "squid_processor.transfer"
"""
input balances_transfer_stddev_pop_order_by {
	amount: order_by
	block_number: order_by
}

"""
aggregate stddev_samp on columns
"""
type balances_transfer_stddev_samp_fields {
	amount: Float
	block_number: Float
}

"""
order by stddev_samp() on columns of table "squid_processor.transfer"
"""
input balances_transfer_stddev_samp_order_by {
	amount: order_by
	block_number: order_by
}

"""
Streaming cursor of the table "transfer"
"""
input balances_transfer_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: balances_transfer_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: balances_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input balances_transfer_stream_cursor_value_input {
	amount: numeric
	asset_id: String
	block_number: Int
	extrinsic_hash: String
	from_id: String
	id: String
	status: String
	timestamp: timestamptz
	to_id: String
}

"""
aggregate sum on columns
"""
type balances_transfer_sum_fields {
	amount: numeric
	block_number: Int
}

"""
order by sum() on columns of table "squid_processor.transfer"
"""
input balances_transfer_sum_order_by {
	amount: order_by
	block_number: order_by
}

"""
aggregate var_pop on columns
"""
type balances_transfer_var_pop_fields {
	amount: Float
	block_number: Float
}

"""
order by var_pop() on columns of table "squid_processor.transfer"
"""
input balances_transfer_var_pop_order_by {
	amount: order_by
	block_number: order_by
}

"""
aggregate var_samp on columns
"""
type balances_transfer_var_samp_fields {
	amount: Float
	block_number: Float
}

"""
order by var_samp() on columns of table "squid_processor.transfer"
"""
input balances_transfer_var_samp_order_by {
	amount: order_by
	block_number: order_by
}

"""
aggregate variance on columns
"""
type balances_transfer_variance_fields {
	amount: Float
	block_number: Float
}

"""
order by variance() on columns of table "squid_processor.transfer"
"""
input balances_transfer_variance_order_by {
	amount: order_by
	block_number: order_by
}

scalar bpchar

"""
Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'.
"""
input bpchar_comparison_exp {
	_eq: bpchar
	_gt: bpchar
	_gte: bpchar

	"""
	does the column match the given case-insensitive pattern
	"""
	_ilike: bpchar
	_in: [bpchar!]

	"""
	does the column match the given POSIX regular expression, case insensitive
	"""
	_iregex: bpchar
	_is_null: Boolean

	"""
	does the column match the given pattern
	"""
	_like: bpchar
	_lt: bpchar
	_lte: bpchar
	_neq: bpchar

	"""
	does the column NOT match the given case-insensitive pattern
	"""
	_nilike: bpchar
	_nin: [bpchar!]

	"""
	does the column NOT match the given POSIX regular expression, case insensitive
	"""
	_niregex: bpchar

	"""
	does the column NOT match the given pattern
	"""
	_nlike: bpchar

	"""
	does the column NOT match the given POSIX regular expression, case sensitive
	"""
	_nregex: bpchar

	"""
	does the column NOT match the given SQL regular expression
	"""
	_nsimilar: bpchar

	"""
	does the column match the given POSIX regular expression, case sensitive
	"""
	_regex: bpchar

	"""
	does the column match the given SQL regular expression
	"""
	_similar: bpchar
}

"""
ordering argument of a cursor
"""
enum ebd_inbox_cursor_ordering {
	"""
	ascending ordering of the cursor
	"""
	ASC

	"""
	descending ordering of the cursor
	"""
	DESC
}

type ebd_inbox_ebd_inbox_query {
	"""
	fetch data from the table: "inbox.eth_event"
	"""
	eth_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_eth_event_bool_exp
	): [ebd_inbox_eth_event!]!

	"""
	fetch aggregated fields from the table: "inbox.eth_event"
	"""
	eth_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_eth_event_bool_exp
	): ebd_inbox_eth_event_aggregate!

	"""
	fetch data from the table: "inbox.eth_event" using primary key columns
	"""
	eth_event_by_pk(id: String!): ebd_inbox_eth_event

	"""
	fetch data from the table: "inbox.event_proof"
	"""
	event_proof(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): [ebd_inbox_event_proof!]!

	"""
	fetch aggregated fields from the table: "inbox.event_proof"
	"""
	event_proof_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): ebd_inbox_event_proof_aggregate!

	"""
	fetch data from the table: "inbox.event_proof" using primary key columns
	"""
	event_proof_by_pk(id: String!): ebd_inbox_event_proof

	"""
	fetch data from the table: "inbox.root_event"
	"""
	root_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): [ebd_inbox_root_event!]!

	"""
	fetch aggregated fields from the table: "inbox.root_event"
	"""
	root_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): ebd_inbox_root_event_aggregate!

	"""
	fetch data from the table: "inbox.root_event" using primary key columns
	"""
	root_event_by_pk(id: String!): ebd_inbox_root_event

	"""
	fetch data from the table: "inbox.validator_set"
	"""
	validator_set(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_validator_set_bool_exp
	): [ebd_inbox_validator_set!]!

	"""
	fetch aggregated fields from the table: "inbox.validator_set"
	"""
	validator_set_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_validator_set_bool_exp
	): ebd_inbox_validator_set_aggregate!

	"""
	fetch data from the table: "inbox.validator_set" using primary key columns
	"""
	validator_set_by_pk(id: String!): ebd_inbox_validator_set
}

type ebd_inbox_ebd_inbox_subscription {
	"""
	fetch data from the table: "inbox.eth_event"
	"""
	eth_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_eth_event_bool_exp
	): [ebd_inbox_eth_event!]!

	"""
	fetch aggregated fields from the table: "inbox.eth_event"
	"""
	eth_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_eth_event_bool_exp
	): ebd_inbox_eth_event_aggregate!

	"""
	fetch data from the table: "inbox.eth_event" using primary key columns
	"""
	eth_event_by_pk(id: String!): ebd_inbox_eth_event

	"""
	fetch data from the table in a streaming manner : "inbox.eth_event"
	"""
	eth_event_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_inbox_eth_event_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_inbox_eth_event_bool_exp
	): [ebd_inbox_eth_event!]!

	"""
	fetch data from the table: "inbox.event_proof"
	"""
	event_proof(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): [ebd_inbox_event_proof!]!

	"""
	fetch aggregated fields from the table: "inbox.event_proof"
	"""
	event_proof_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): ebd_inbox_event_proof_aggregate!

	"""
	fetch data from the table: "inbox.event_proof" using primary key columns
	"""
	event_proof_by_pk(id: String!): ebd_inbox_event_proof

	"""
	fetch data from the table in a streaming manner : "inbox.event_proof"
	"""
	event_proof_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_inbox_event_proof_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): [ebd_inbox_event_proof!]!

	"""
	fetch data from the table: "inbox.root_event"
	"""
	root_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): [ebd_inbox_root_event!]!

	"""
	fetch aggregated fields from the table: "inbox.root_event"
	"""
	root_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): ebd_inbox_root_event_aggregate!

	"""
	fetch data from the table: "inbox.root_event" using primary key columns
	"""
	root_event_by_pk(id: String!): ebd_inbox_root_event

	"""
	fetch data from the table in a streaming manner : "inbox.root_event"
	"""
	root_event_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_inbox_root_event_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): [ebd_inbox_root_event!]!

	"""
	fetch data from the table: "inbox.validator_set"
	"""
	validator_set(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_validator_set_bool_exp
	): [ebd_inbox_validator_set!]!

	"""
	fetch aggregated fields from the table: "inbox.validator_set"
	"""
	validator_set_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_validator_set_bool_exp
	): ebd_inbox_validator_set_aggregate!

	"""
	fetch data from the table: "inbox.validator_set" using primary key columns
	"""
	validator_set_by_pk(id: String!): ebd_inbox_validator_set

	"""
	fetch data from the table in a streaming manner : "inbox.validator_set"
	"""
	validator_set_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_inbox_validator_set_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_inbox_validator_set_bool_exp
	): [ebd_inbox_validator_set!]!
}

"""
columns and relationships of "inbox.eth_event"
"""
type ebd_inbox_eth_event {
	destination: String
	id: String!
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
aggregated selection of "inbox.eth_event"
"""
type ebd_inbox_eth_event_aggregate {
	aggregate: ebd_inbox_eth_event_aggregate_fields
	nodes: [ebd_inbox_eth_event!]!
}

"""
aggregate fields of "inbox.eth_event"
"""
type ebd_inbox_eth_event_aggregate_fields {
	count(columns: [ebd_inbox_eth_event_select_column!], distinct: Boolean): Int!
	max: ebd_inbox_eth_event_max_fields
	min: ebd_inbox_eth_event_min_fields
}

"""
Boolean expression to filter rows from the table "inbox.eth_event". All fields are combined with a logical 'AND'.
"""
input ebd_inbox_eth_event_bool_exp {
	_and: [ebd_inbox_eth_event_bool_exp!]
	_not: ebd_inbox_eth_event_bool_exp
	_or: [ebd_inbox_eth_event_bool_exp!]
	destination: String_comparison_exp
	id: String_comparison_exp
	message: String_comparison_exp
	source: String_comparison_exp
	status: String_comparison_exp
	tx_hash: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_inbox_eth_event_max_fields {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
aggregate min on columns
"""
type ebd_inbox_eth_event_min_fields {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
Ordering options when selecting data from "inbox.eth_event".
"""
input ebd_inbox_eth_event_order_by {
	destination: order_by
	id: order_by
	message: order_by
	source: order_by
	status: order_by
	tx_hash: order_by
}

"""
select columns of table "inbox.eth_event"
"""
enum ebd_inbox_eth_event_select_column {
	"""
	column name
	"""
	destination

	"""
	column name
	"""
	id

	"""
	column name
	"""
	message

	"""
	column name
	"""
	source

	"""
	column name
	"""
	status

	"""
	column name
	"""
	tx_hash
}

"""
Streaming cursor of the table "eth_event"
"""
input ebd_inbox_eth_event_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_inbox_eth_event_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_inbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_inbox_eth_event_stream_cursor_value_input {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
columns and relationships of "inbox.event_proof"
"""
type ebd_inbox_event_proof {
	block_hash: String
	id: String!

	"""
	An array relationship
	"""
	root_events(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): [ebd_inbox_root_event!]!

	"""
	An aggregate relationship
	"""
	root_events_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_root_event_bool_exp
	): ebd_inbox_root_event_aggregate!
	signature(
		"""
		JSON select path
		"""
		path: String
	): jsonb
	tag: String

	"""
	An object relationship
	"""
	validator_set: ebd_inbox_validator_set
	validator_set_id: String
}

"""
aggregated selection of "inbox.event_proof"
"""
type ebd_inbox_event_proof_aggregate {
	aggregate: ebd_inbox_event_proof_aggregate_fields
	nodes: [ebd_inbox_event_proof!]!
}

"""
aggregate fields of "inbox.event_proof"
"""
type ebd_inbox_event_proof_aggregate_fields {
	count(
		columns: [ebd_inbox_event_proof_select_column!]
		distinct: Boolean
	): Int!
	max: ebd_inbox_event_proof_max_fields
	min: ebd_inbox_event_proof_min_fields
}

"""
order by aggregate values of table "inbox.event_proof"
"""
input ebd_inbox_event_proof_aggregate_order_by {
	count: order_by
	max: ebd_inbox_event_proof_max_order_by
	min: ebd_inbox_event_proof_min_order_by
}

"""
Boolean expression to filter rows from the table "inbox.event_proof". All fields are combined with a logical 'AND'.
"""
input ebd_inbox_event_proof_bool_exp {
	_and: [ebd_inbox_event_proof_bool_exp!]
	_not: ebd_inbox_event_proof_bool_exp
	_or: [ebd_inbox_event_proof_bool_exp!]
	block_hash: String_comparison_exp
	id: String_comparison_exp
	root_events: ebd_inbox_root_event_bool_exp
	signature: jsonb_comparison_exp
	tag: String_comparison_exp
	validator_set: ebd_inbox_validator_set_bool_exp
	validator_set_id: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_inbox_event_proof_max_fields {
	block_hash: String
	id: String
	tag: String
	validator_set_id: String
}

"""
order by max() on columns of table "inbox.event_proof"
"""
input ebd_inbox_event_proof_max_order_by {
	block_hash: order_by
	id: order_by
	tag: order_by
	validator_set_id: order_by
}

"""
aggregate min on columns
"""
type ebd_inbox_event_proof_min_fields {
	block_hash: String
	id: String
	tag: String
	validator_set_id: String
}

"""
order by min() on columns of table "inbox.event_proof"
"""
input ebd_inbox_event_proof_min_order_by {
	block_hash: order_by
	id: order_by
	tag: order_by
	validator_set_id: order_by
}

"""
Ordering options when selecting data from "inbox.event_proof".
"""
input ebd_inbox_event_proof_order_by {
	block_hash: order_by
	id: order_by
	root_events_aggregate: ebd_inbox_root_event_aggregate_order_by
	signature: order_by
	tag: order_by
	validator_set: ebd_inbox_validator_set_order_by
	validator_set_id: order_by
}

"""
select columns of table "inbox.event_proof"
"""
enum ebd_inbox_event_proof_select_column {
	"""
	column name
	"""
	block_hash

	"""
	column name
	"""
	id

	"""
	column name
	"""
	signature

	"""
	column name
	"""
	tag

	"""
	column name
	"""
	validator_set_id
}

"""
Streaming cursor of the table "event_proof"
"""
input ebd_inbox_event_proof_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_inbox_event_proof_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_inbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_inbox_event_proof_stream_cursor_value_input {
	block_hash: String
	id: String
	signature: jsonb
	tag: String
	validator_set_id: String
}

"""
columns and relationships of "inbox.root_event"
"""
type ebd_inbox_root_event {
	destination: String

	"""
	An object relationship
	"""
	event_proof: ebd_inbox_event_proof
	id: String!
	message: String
	proof_id: String
	source: String
	status: String
}

"""
aggregated selection of "inbox.root_event"
"""
type ebd_inbox_root_event_aggregate {
	aggregate: ebd_inbox_root_event_aggregate_fields
	nodes: [ebd_inbox_root_event!]!
}

"""
aggregate fields of "inbox.root_event"
"""
type ebd_inbox_root_event_aggregate_fields {
	count(columns: [ebd_inbox_root_event_select_column!], distinct: Boolean): Int!
	max: ebd_inbox_root_event_max_fields
	min: ebd_inbox_root_event_min_fields
}

"""
order by aggregate values of table "inbox.root_event"
"""
input ebd_inbox_root_event_aggregate_order_by {
	count: order_by
	max: ebd_inbox_root_event_max_order_by
	min: ebd_inbox_root_event_min_order_by
}

"""
Boolean expression to filter rows from the table "inbox.root_event". All fields are combined with a logical 'AND'.
"""
input ebd_inbox_root_event_bool_exp {
	_and: [ebd_inbox_root_event_bool_exp!]
	_not: ebd_inbox_root_event_bool_exp
	_or: [ebd_inbox_root_event_bool_exp!]
	destination: String_comparison_exp
	event_proof: ebd_inbox_event_proof_bool_exp
	id: String_comparison_exp
	message: String_comparison_exp
	proof_id: String_comparison_exp
	source: String_comparison_exp
	status: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_inbox_root_event_max_fields {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
order by max() on columns of table "inbox.root_event"
"""
input ebd_inbox_root_event_max_order_by {
	destination: order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
aggregate min on columns
"""
type ebd_inbox_root_event_min_fields {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
order by min() on columns of table "inbox.root_event"
"""
input ebd_inbox_root_event_min_order_by {
	destination: order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
Ordering options when selecting data from "inbox.root_event".
"""
input ebd_inbox_root_event_order_by {
	destination: order_by
	event_proof: ebd_inbox_event_proof_order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
select columns of table "inbox.root_event"
"""
enum ebd_inbox_root_event_select_column {
	"""
	column name
	"""
	destination

	"""
	column name
	"""
	id

	"""
	column name
	"""
	message

	"""
	column name
	"""
	proof_id

	"""
	column name
	"""
	source

	"""
	column name
	"""
	status
}

"""
Streaming cursor of the table "root_event"
"""
input ebd_inbox_root_event_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_inbox_root_event_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_inbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_inbox_root_event_stream_cursor_value_input {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
columns and relationships of "inbox.validator_set"
"""
type ebd_inbox_validator_set {
	"""
	An array relationship
	"""
	event_proofs(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): [ebd_inbox_event_proof!]!

	"""
	An aggregate relationship
	"""
	event_proofs_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_inbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_inbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_inbox_event_proof_bool_exp
	): ebd_inbox_event_proof_aggregate!
	id: String!
	validators: _text
}

"""
aggregated selection of "inbox.validator_set"
"""
type ebd_inbox_validator_set_aggregate {
	aggregate: ebd_inbox_validator_set_aggregate_fields
	nodes: [ebd_inbox_validator_set!]!
}

"""
aggregate fields of "inbox.validator_set"
"""
type ebd_inbox_validator_set_aggregate_fields {
	count(
		columns: [ebd_inbox_validator_set_select_column!]
		distinct: Boolean
	): Int!
	max: ebd_inbox_validator_set_max_fields
	min: ebd_inbox_validator_set_min_fields
}

"""
Boolean expression to filter rows from the table "inbox.validator_set". All fields are combined with a logical 'AND'.
"""
input ebd_inbox_validator_set_bool_exp {
	_and: [ebd_inbox_validator_set_bool_exp!]
	_not: ebd_inbox_validator_set_bool_exp
	_or: [ebd_inbox_validator_set_bool_exp!]
	event_proofs: ebd_inbox_event_proof_bool_exp
	id: String_comparison_exp
	validators: _text_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_inbox_validator_set_max_fields {
	id: String
}

"""
aggregate min on columns
"""
type ebd_inbox_validator_set_min_fields {
	id: String
}

"""
Ordering options when selecting data from "inbox.validator_set".
"""
input ebd_inbox_validator_set_order_by {
	event_proofs_aggregate: ebd_inbox_event_proof_aggregate_order_by
	id: order_by
	validators: order_by
}

"""
select columns of table "inbox.validator_set"
"""
enum ebd_inbox_validator_set_select_column {
	"""
	column name
	"""
	id

	"""
	column name
	"""
	validators
}

"""
Streaming cursor of the table "validator_set"
"""
input ebd_inbox_validator_set_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_inbox_validator_set_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_inbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_inbox_validator_set_stream_cursor_value_input {
	id: String
	validators: _text
}

"""
ordering argument of a cursor
"""
enum ebd_outbox_cursor_ordering {
	"""
	ascending ordering of the cursor
	"""
	ASC

	"""
	descending ordering of the cursor
	"""
	DESC
}

type ebd_outbox_ebd_outbox_query {
	"""
	fetch data from the table: "outbox.eth_event"
	"""
	eth_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_eth_event_bool_exp
	): [ebd_outbox_eth_event!]!

	"""
	fetch aggregated fields from the table: "outbox.eth_event"
	"""
	eth_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_eth_event_bool_exp
	): ebd_outbox_eth_event_aggregate!

	"""
	fetch data from the table: "outbox.eth_event" using primary key columns
	"""
	eth_event_by_pk(id: String!): ebd_outbox_eth_event

	"""
	fetch data from the table: "outbox.event_proof"
	"""
	event_proof(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): [ebd_outbox_event_proof!]!

	"""
	fetch aggregated fields from the table: "outbox.event_proof"
	"""
	event_proof_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): ebd_outbox_event_proof_aggregate!

	"""
	fetch data from the table: "outbox.event_proof" using primary key columns
	"""
	event_proof_by_pk(id: String!): ebd_outbox_event_proof

	"""
	fetch data from the table: "outbox.root_event"
	"""
	root_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): [ebd_outbox_root_event!]!

	"""
	fetch aggregated fields from the table: "outbox.root_event"
	"""
	root_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): ebd_outbox_root_event_aggregate!

	"""
	fetch data from the table: "outbox.root_event" using primary key columns
	"""
	root_event_by_pk(id: String!): ebd_outbox_root_event

	"""
	fetch data from the table: "outbox.validator_set"
	"""
	validator_set(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_validator_set_bool_exp
	): [ebd_outbox_validator_set!]!

	"""
	fetch aggregated fields from the table: "outbox.validator_set"
	"""
	validator_set_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_validator_set_bool_exp
	): ebd_outbox_validator_set_aggregate!

	"""
	fetch data from the table: "outbox.validator_set" using primary key columns
	"""
	validator_set_by_pk(id: String!): ebd_outbox_validator_set
}

type ebd_outbox_ebd_outbox_subscription {
	"""
	fetch data from the table: "outbox.eth_event"
	"""
	eth_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_eth_event_bool_exp
	): [ebd_outbox_eth_event!]!

	"""
	fetch aggregated fields from the table: "outbox.eth_event"
	"""
	eth_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_eth_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_eth_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_eth_event_bool_exp
	): ebd_outbox_eth_event_aggregate!

	"""
	fetch data from the table: "outbox.eth_event" using primary key columns
	"""
	eth_event_by_pk(id: String!): ebd_outbox_eth_event

	"""
	fetch data from the table in a streaming manner : "outbox.eth_event"
	"""
	eth_event_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_outbox_eth_event_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_outbox_eth_event_bool_exp
	): [ebd_outbox_eth_event!]!

	"""
	fetch data from the table: "outbox.event_proof"
	"""
	event_proof(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): [ebd_outbox_event_proof!]!

	"""
	fetch aggregated fields from the table: "outbox.event_proof"
	"""
	event_proof_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): ebd_outbox_event_proof_aggregate!

	"""
	fetch data from the table: "outbox.event_proof" using primary key columns
	"""
	event_proof_by_pk(id: String!): ebd_outbox_event_proof

	"""
	fetch data from the table in a streaming manner : "outbox.event_proof"
	"""
	event_proof_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_outbox_event_proof_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): [ebd_outbox_event_proof!]!

	"""
	fetch data from the table: "outbox.root_event"
	"""
	root_event(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): [ebd_outbox_root_event!]!

	"""
	fetch aggregated fields from the table: "outbox.root_event"
	"""
	root_event_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): ebd_outbox_root_event_aggregate!

	"""
	fetch data from the table: "outbox.root_event" using primary key columns
	"""
	root_event_by_pk(id: String!): ebd_outbox_root_event

	"""
	fetch data from the table in a streaming manner : "outbox.root_event"
	"""
	root_event_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_outbox_root_event_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): [ebd_outbox_root_event!]!

	"""
	fetch data from the table: "outbox.validator_set"
	"""
	validator_set(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_validator_set_bool_exp
	): [ebd_outbox_validator_set!]!

	"""
	fetch aggregated fields from the table: "outbox.validator_set"
	"""
	validator_set_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_validator_set_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_validator_set_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_validator_set_bool_exp
	): ebd_outbox_validator_set_aggregate!

	"""
	fetch data from the table: "outbox.validator_set" using primary key columns
	"""
	validator_set_by_pk(id: String!): ebd_outbox_validator_set

	"""
	fetch data from the table in a streaming manner : "outbox.validator_set"
	"""
	validator_set_stream(
		"""
		maximum number of rows returned in a single batch
		"""
		batch_size: Int!

		"""
		cursor to stream the results returned by the query
		"""
		cursor: [ebd_outbox_validator_set_stream_cursor_input]!

		"""
		filter the rows returned
		"""
		where: ebd_outbox_validator_set_bool_exp
	): [ebd_outbox_validator_set!]!
}

"""
columns and relationships of "outbox.eth_event"
"""
type ebd_outbox_eth_event {
	destination: String
	id: String!
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
aggregated selection of "outbox.eth_event"
"""
type ebd_outbox_eth_event_aggregate {
	aggregate: ebd_outbox_eth_event_aggregate_fields
	nodes: [ebd_outbox_eth_event!]!
}

"""
aggregate fields of "outbox.eth_event"
"""
type ebd_outbox_eth_event_aggregate_fields {
	count(columns: [ebd_outbox_eth_event_select_column!], distinct: Boolean): Int!
	max: ebd_outbox_eth_event_max_fields
	min: ebd_outbox_eth_event_min_fields
}

"""
Boolean expression to filter rows from the table "outbox.eth_event". All fields are combined with a logical 'AND'.
"""
input ebd_outbox_eth_event_bool_exp {
	_and: [ebd_outbox_eth_event_bool_exp!]
	_not: ebd_outbox_eth_event_bool_exp
	_or: [ebd_outbox_eth_event_bool_exp!]
	destination: String_comparison_exp
	id: String_comparison_exp
	message: String_comparison_exp
	source: String_comparison_exp
	status: String_comparison_exp
	tx_hash: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_outbox_eth_event_max_fields {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
aggregate min on columns
"""
type ebd_outbox_eth_event_min_fields {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
Ordering options when selecting data from "outbox.eth_event".
"""
input ebd_outbox_eth_event_order_by {
	destination: order_by
	id: order_by
	message: order_by
	source: order_by
	status: order_by
	tx_hash: order_by
}

"""
select columns of table "outbox.eth_event"
"""
enum ebd_outbox_eth_event_select_column {
	"""
	column name
	"""
	destination

	"""
	column name
	"""
	id

	"""
	column name
	"""
	message

	"""
	column name
	"""
	source

	"""
	column name
	"""
	status

	"""
	column name
	"""
	tx_hash
}

"""
Streaming cursor of the table "eth_event"
"""
input ebd_outbox_eth_event_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_outbox_eth_event_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_outbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_outbox_eth_event_stream_cursor_value_input {
	destination: String
	id: String
	message: String
	source: String
	status: String
	tx_hash: String
}

"""
columns and relationships of "outbox.event_proof"
"""
type ebd_outbox_event_proof {
	block_hash: String
	id: String!

	"""
	An array relationship
	"""
	root_events(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): [ebd_outbox_root_event!]!

	"""
	An aggregate relationship
	"""
	root_events_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_root_event_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_root_event_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_root_event_bool_exp
	): ebd_outbox_root_event_aggregate!
	signature(
		"""
		JSON select path
		"""
		path: String
	): jsonb
	tag: String

	"""
	An object relationship
	"""
	validator_set: ebd_outbox_validator_set
	validator_set_id: String
}

"""
aggregated selection of "outbox.event_proof"
"""
type ebd_outbox_event_proof_aggregate {
	aggregate: ebd_outbox_event_proof_aggregate_fields
	nodes: [ebd_outbox_event_proof!]!
}

"""
aggregate fields of "outbox.event_proof"
"""
type ebd_outbox_event_proof_aggregate_fields {
	count(
		columns: [ebd_outbox_event_proof_select_column!]
		distinct: Boolean
	): Int!
	max: ebd_outbox_event_proof_max_fields
	min: ebd_outbox_event_proof_min_fields
}

"""
order by aggregate values of table "outbox.event_proof"
"""
input ebd_outbox_event_proof_aggregate_order_by {
	count: order_by
	max: ebd_outbox_event_proof_max_order_by
	min: ebd_outbox_event_proof_min_order_by
}

"""
Boolean expression to filter rows from the table "outbox.event_proof". All fields are combined with a logical 'AND'.
"""
input ebd_outbox_event_proof_bool_exp {
	_and: [ebd_outbox_event_proof_bool_exp!]
	_not: ebd_outbox_event_proof_bool_exp
	_or: [ebd_outbox_event_proof_bool_exp!]
	block_hash: String_comparison_exp
	id: String_comparison_exp
	root_events: ebd_outbox_root_event_bool_exp
	signature: jsonb_comparison_exp
	tag: String_comparison_exp
	validator_set: ebd_outbox_validator_set_bool_exp
	validator_set_id: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_outbox_event_proof_max_fields {
	block_hash: String
	id: String
	tag: String
	validator_set_id: String
}

"""
order by max() on columns of table "outbox.event_proof"
"""
input ebd_outbox_event_proof_max_order_by {
	block_hash: order_by
	id: order_by
	tag: order_by
	validator_set_id: order_by
}

"""
aggregate min on columns
"""
type ebd_outbox_event_proof_min_fields {
	block_hash: String
	id: String
	tag: String
	validator_set_id: String
}

"""
order by min() on columns of table "outbox.event_proof"
"""
input ebd_outbox_event_proof_min_order_by {
	block_hash: order_by
	id: order_by
	tag: order_by
	validator_set_id: order_by
}

"""
Ordering options when selecting data from "outbox.event_proof".
"""
input ebd_outbox_event_proof_order_by {
	block_hash: order_by
	id: order_by
	root_events_aggregate: ebd_outbox_root_event_aggregate_order_by
	signature: order_by
	tag: order_by
	validator_set: ebd_outbox_validator_set_order_by
	validator_set_id: order_by
}

"""
select columns of table "outbox.event_proof"
"""
enum ebd_outbox_event_proof_select_column {
	"""
	column name
	"""
	block_hash

	"""
	column name
	"""
	id

	"""
	column name
	"""
	signature

	"""
	column name
	"""
	tag

	"""
	column name
	"""
	validator_set_id
}

"""
Streaming cursor of the table "event_proof"
"""
input ebd_outbox_event_proof_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_outbox_event_proof_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_outbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_outbox_event_proof_stream_cursor_value_input {
	block_hash: String
	id: String
	signature: jsonb
	tag: String
	validator_set_id: String
}

"""
columns and relationships of "outbox.root_event"
"""
type ebd_outbox_root_event {
	destination: String

	"""
	An object relationship
	"""
	event_proof: ebd_outbox_event_proof
	id: String!
	message: String
	proof_id: String
	source: String
	status: String
}

"""
aggregated selection of "outbox.root_event"
"""
type ebd_outbox_root_event_aggregate {
	aggregate: ebd_outbox_root_event_aggregate_fields
	nodes: [ebd_outbox_root_event!]!
}

"""
aggregate fields of "outbox.root_event"
"""
type ebd_outbox_root_event_aggregate_fields {
	count(
		columns: [ebd_outbox_root_event_select_column!]
		distinct: Boolean
	): Int!
	max: ebd_outbox_root_event_max_fields
	min: ebd_outbox_root_event_min_fields
}

"""
order by aggregate values of table "outbox.root_event"
"""
input ebd_outbox_root_event_aggregate_order_by {
	count: order_by
	max: ebd_outbox_root_event_max_order_by
	min: ebd_outbox_root_event_min_order_by
}

"""
Boolean expression to filter rows from the table "outbox.root_event". All fields are combined with a logical 'AND'.
"""
input ebd_outbox_root_event_bool_exp {
	_and: [ebd_outbox_root_event_bool_exp!]
	_not: ebd_outbox_root_event_bool_exp
	_or: [ebd_outbox_root_event_bool_exp!]
	destination: String_comparison_exp
	event_proof: ebd_outbox_event_proof_bool_exp
	id: String_comparison_exp
	message: String_comparison_exp
	proof_id: String_comparison_exp
	source: String_comparison_exp
	status: String_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_outbox_root_event_max_fields {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
order by max() on columns of table "outbox.root_event"
"""
input ebd_outbox_root_event_max_order_by {
	destination: order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
aggregate min on columns
"""
type ebd_outbox_root_event_min_fields {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
order by min() on columns of table "outbox.root_event"
"""
input ebd_outbox_root_event_min_order_by {
	destination: order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
Ordering options when selecting data from "outbox.root_event".
"""
input ebd_outbox_root_event_order_by {
	destination: order_by
	event_proof: ebd_outbox_event_proof_order_by
	id: order_by
	message: order_by
	proof_id: order_by
	source: order_by
	status: order_by
}

"""
select columns of table "outbox.root_event"
"""
enum ebd_outbox_root_event_select_column {
	"""
	column name
	"""
	destination

	"""
	column name
	"""
	id

	"""
	column name
	"""
	message

	"""
	column name
	"""
	proof_id

	"""
	column name
	"""
	source

	"""
	column name
	"""
	status
}

"""
Streaming cursor of the table "root_event"
"""
input ebd_outbox_root_event_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_outbox_root_event_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_outbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_outbox_root_event_stream_cursor_value_input {
	destination: String
	id: String
	message: String
	proof_id: String
	source: String
	status: String
}

"""
columns and relationships of "outbox.validator_set"
"""
type ebd_outbox_validator_set {
	"""
	An array relationship
	"""
	event_proofs(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): [ebd_outbox_event_proof!]!

	"""
	An aggregate relationship
	"""
	event_proofs_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [ebd_outbox_event_proof_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [ebd_outbox_event_proof_order_by!]

		"""
		filter the rows returned
		"""
		where: ebd_outbox_event_proof_bool_exp
	): ebd_outbox_event_proof_aggregate!
	id: String!
	validators: _text
}

"""
aggregated selection of "outbox.validator_set"
"""
type ebd_outbox_validator_set_aggregate {
	aggregate: ebd_outbox_validator_set_aggregate_fields
	nodes: [ebd_outbox_validator_set!]!
}

"""
aggregate fields of "outbox.validator_set"
"""
type ebd_outbox_validator_set_aggregate_fields {
	count(
		columns: [ebd_outbox_validator_set_select_column!]
		distinct: Boolean
	): Int!
	max: ebd_outbox_validator_set_max_fields
	min: ebd_outbox_validator_set_min_fields
}

"""
Boolean expression to filter rows from the table "outbox.validator_set". All fields are combined with a logical 'AND'.
"""
input ebd_outbox_validator_set_bool_exp {
	_and: [ebd_outbox_validator_set_bool_exp!]
	_not: ebd_outbox_validator_set_bool_exp
	_or: [ebd_outbox_validator_set_bool_exp!]
	event_proofs: ebd_outbox_event_proof_bool_exp
	id: String_comparison_exp
	validators: _text_comparison_exp
}

"""
aggregate max on columns
"""
type ebd_outbox_validator_set_max_fields {
	id: String
}

"""
aggregate min on columns
"""
type ebd_outbox_validator_set_min_fields {
	id: String
}

"""
Ordering options when selecting data from "outbox.validator_set".
"""
input ebd_outbox_validator_set_order_by {
	event_proofs_aggregate: ebd_outbox_event_proof_aggregate_order_by
	id: order_by
	validators: order_by
}

"""
select columns of table "outbox.validator_set"
"""
enum ebd_outbox_validator_set_select_column {
	"""
	column name
	"""
	id

	"""
	column name
	"""
	validators
}

"""
Streaming cursor of the table "validator_set"
"""
input ebd_outbox_validator_set_stream_cursor_input {
	"""
	Stream column input with initial value
	"""
	initial_value: ebd_outbox_validator_set_stream_cursor_value_input!

	"""
	cursor ordering
	"""
	ordering: ebd_outbox_cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input ebd_outbox_validator_set_stream_cursor_value_input {
	id: String
	validators: _text
}

scalar jsonb

input jsonb_cast_exp {
	String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
	_cast: jsonb_cast_exp

	"""
	is the column contained in the given json value
	"""
	_contained_in: jsonb

	"""
	does the column contain the given json value at the top level
	"""
	_contains: jsonb
	_eq: jsonb
	_gt: jsonb
	_gte: jsonb

	"""
	does the string exist as a top-level key in the column
	"""
	_has_key: String

	"""
	do all of these strings exist as top-level keys in the column
	"""
	_has_keys_all: [String!]

	"""
	do any of these strings exist as top-level keys in the column
	"""
	_has_keys_any: [String!]
	_in: [jsonb!]
	_is_null: Boolean
	_lt: jsonb
	_lte: jsonb
	_neq: jsonb
	_nin: [jsonb!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
	_eq: numeric
	_gt: numeric
	_gte: numeric
	_in: [numeric!]
	_is_null: Boolean
	_lt: numeric
	_lte: numeric
	_neq: numeric
	_nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
	"""
	in ascending order, nulls last
	"""
	asc

	"""
	in ascending order, nulls first
	"""
	asc_nulls_first

	"""
	in ascending order, nulls last
	"""
	asc_nulls_last

	"""
	in descending order, nulls first
	"""
	desc

	"""
	in descending order, nulls first
	"""
	desc_nulls_first

	"""
	in descending order, nulls last
	"""
	desc_nulls_last
}

type query_root {
	archive: archive_archive_query
	balances: balances_balances_query
	ebd_inbox: ebd_inbox_ebd_inbox_query
	ebd_outbox: ebd_outbox_ebd_outbox_query
}

type subscription_root {
	archive: archive_archive_subscription
	balances: balances_balances_subscription
	ebd_inbox: ebd_inbox_ebd_inbox_subscription
	ebd_outbox: ebd_outbox_ebd_outbox_subscription
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
	_eq: timestamptz
	_gt: timestamptz
	_gte: timestamptz
	_in: [timestamptz!]
	_is_null: Boolean
	_lt: timestamptz
	_lte: timestamptz
	_neq: timestamptz
	_nin: [timestamptz!]
}
